<PageTitle>PanelPrincipal</PageTitle>

@inject IDialogService DialogService


<FluentStack>
    <FluentButton OnClick="@ShowSuccessAsync" Appearance="Appearance.Accent">Success</FluentButton>
    <FluentButton OnClick="@ShowWarningAsync" Appearance="Appearance.Accent">Warning</FluentButton>
    <FluentButton OnClick="@ShowErrorAsync" Appearance="Appearance.Accent">Error</FluentButton>
    <FluentButton OnClick="@ShowInformationAsync" Appearance="Appearance.Accent">Information</FluentButton>
    <FluentButton OnClick="@ShowConfirmationAsync" Appearance="Appearance.Accent">Confirmation</FluentButton>
    <FluentButton OnClick="@ShowMessageBoxLongAsync" Appearance="Appearance.Accent">Long message</FluentButton>
    <FluentButton OnClick="@ShowMessageBoxAsync" Appearance="Appearance.Accent">Custom message</FluentButton>
</FluentStack>

<p>
    Last result: @(canceled == null ? "" : (canceled == true ? "❌ Canceled" : "✅ OK"))
</p>

@code
{
    bool? canceled;

    private async Task ShowSuccessAsync()
    {
        var dialog = await DialogService.ShowSuccessAsync("The action was a success");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowWarningAsync()
    {
        var dialog = await DialogService.ShowWarningAsync("This is your final warning");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowErrorAsync()
    {
        var dialog = await DialogService.ShowErrorAsync("This is an error");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowInformationAsync()
    {
        var dialog = await DialogService.ShowInfoAsync("This is a message");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowConfirmationAsync()
    {
        var dialog = await DialogService.ShowConfirmationAsync("Are you <strong>sure</strong> you want to delete this item? <br /><br />This will also remove any linked items");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowMessageBoxLongAsync()
    {
        var dialog = await DialogService.ShowInfoAsync("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum");
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }

    private async Task ShowMessageBoxAsync()
    {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
        {
            Content = new()
            {
                Title = "My title",
                MarkupMessage = new MarkupString("My <strong>customized</strong> message"),
                Icon = new Icons.Regular.Size24.Games(),
                IconColor = Color.Success,
            },
            PrimaryAction = "Plus",
            SecondaryAction = "Minus",
            Width = "300px",
        });
        var result = await dialog.Result;
        canceled = result.Cancelled;
    }
}


@* 
@{
    string stylevalue = $"background-color: var(--neutral-layer-3); overflow: auto; resize: {(_vertical ? "vertical; width: 86px; height: 320px;" : "horizontal;width: 440px; height: 68px;")}  padding: 10px;";
}
<FluentStack Orientation="Orientation.Vertical" Style="height: 100%;">
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentSwitch @bind-Value="_showSearch" CheckedMessage="Show" UncheckedMessage="Hide" Label="Show search in popover" />
        <FluentSwitch @bind-Value="_vertical" CheckedMessage="Vertical" UncheckedMessage="Horizontal" Label="Orientation" />
    </FluentStack>
    <div style="@stylevalue">
        @{
            var wh = _vertical ? "height: 100%; width: 100%;" : "";
        }
        <FluentAppBar Orientation="@(_vertical? Orientation.Vertical: Orientation.Horizontal)" Style="@(" background-color: var(--neutral-layer-2);")"  PopoverShowSearch="@_showSearch">

            <FluentAppBarItem Href="/AppBarDefault"
                              Match="NavLinkMatch.All"
                              IconRest="ResourcesIcon()"
                              IconActive="ResourcesIcon(active: true)"
                              Text="Resources" />
            <FluentAppBarItem Href="/AppBar"
                              IconRest="ConsoleLogsIcon()"
                              IconActive="ConsoleLogsIcon(active: true)"
                              Text="Console Logs" />
            <FluentAppBarItem Href="/StructuredLogs"
                              IconRest="StructuredLogsIcon()"
                              IconActive="StructuredLogsIcon(active: true)"
                              Text="Logs"
                              Tooltip="Structured Logs"
                              Count="4" />
            <FluentAppBarItem Href="/Traces"
                              IconRest="TracesIcon()"
                              IconActive="TracesIcon(active: true)"
                              Text="Traces" />
            <FluentAppBarItem Href="/Metrics"
                              IconRest="MetricsIcon()"
                              IconActive="MetricsIcon(active: true)"
                              Text="Metrics" />
            <FluentAppBarItem Href="/AppBarPage"
                              IconRest="ResourcesIcon()"
                              IconActive="ResourcesIcon(active: true)"
                              Text="Resources 2" />
            <FluentAppBarItem Href="/AppBar"
                              IconRest="ConsoleLogsIcon()"
                              IconActive="ConsoleLogsIcon(active: true)"
                              Text="Console Logs 2" />
            <FluentAppBarItem Href="/StructuredLogs"
                              IconRest="StructuredLogsIcon()"
                              IconActive="StructuredLogsIcon(active: true)"
                              Text="Structured Logs 2" />
            <FluentAppBarItem Href="/Traces"
                              IconRest="TracesIcon()"
                              IconActive="TracesIcon(active: true)"
                              Text="Traces 2" />
            <FluentAppBarItem Href="/Metrics"
                              IconRest="MetricsIcon()"
                              IconActive="MetricsIcon(active: true)"
                              Text="Metrics 2" />
            <FluentAppBarItem Href="/AppBarPage"
                              IconRest="ResourcesIcon()"
                              IconActive="ResourcesIcon(active: true)"
                              Text="Resources 3" />
            <FluentAppBarItem Href="/AppBar"
                              IconRest="ConsoleLogsIcon()"
                              IconActive="ConsoleLogsIcon(active: true)"
                              Text="Console Logs 3" />
            <FluentAppBarItem Href="/StructuredLogs"
                              IconRest="StructuredLogsIcon()"
                              IconActive="StructuredLogsIcon(active: true)"
                              Text="Structured Logs 3" />
            <FluentAppBarItem Href="/Traces"
                              IconRest="TracesIcon()"
                              IconActive="TracesIcon(active: true)"
                              Text="Traces 3" />
            <FluentAppBarItem Href="/Metrics"
                              IconRest="MetricsIcon()"
                              IconActive="MetricsIcon(active: true)"
                              Text="Metrics 3" />
        </FluentAppBar>
    </div>
</FluentStack>

@code {
    private bool _vertical = true;
    private bool _showSearch = true;

    private static Icon ResourcesIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.AppFolder()
               : new Icons.Regular.Size24.AppFolder();

    private static Icon ConsoleLogsIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.SlideText()
               : new Icons.Regular.Size24.SlideText();

    private static Icon StructuredLogsIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.SlideTextSparkle()
               : new Icons.Regular.Size24.SlideTextSparkle();

    private static Icon TracesIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.GanttChart()
               : new Icons.Regular.Size24.GanttChart();

    private static Icon MetricsIcon(bool active = false) =>
        active ? new Icons.Filled.Size24.ChartMultiple()
               : new Icons.Regular.Size24.ChartMultiple();


}
 *@